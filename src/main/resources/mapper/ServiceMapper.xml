<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="team.combinatorics.midtermproject.dao.ServiceDao">

  <resultMap id="ServiceResultMap" type="team.combinatorics.midtermproject.model.po.ServicePO">
    <id column="sid" jdbcType="INTEGER" property="sid" />
    <result column="service_type" jdbcType="VARCHAR" property="serviceType" />
    <result column="description" jdbcType="VARCHAR" property="description" />
    <result column="state" jdbcType="VARCHAR" property="state" />
    <result column="wid" jdbcType="INTEGER" property="wid" />
    <result column="pid" jdbcType="INTEGER" property="pid" />
  </resultMap>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from after_sale_service
    where sid = #{sid,jdbcType=INTEGER}
  </delete>

  <delete id="deleteByUid" parameterType="java.lang.Integer">
    delete from after_sale_service
    where pid in (select pid from product where product.uid=#{uid})
  </delete>

  <delete id="deleteByPid" parameterType="java.lang.Integer">
    delete from after_sale_service
    where pid=#{pid}
  </delete>

  <insert id="insert" parameterType="team.combinatorics.midtermproject.model.po.ServicePO">
    <selectKey keyProperty="service.sid" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into after_sale_service (service_type, description, state, wid, pid)
    select #{service.serviceType}, #{service.description}, #{service.state}, #{service.wid}, #{service.pid}
    from dual
    where ( (#{service.wid} in (select wid from worker))
            and (#{service.pid} in (select pid from product)) )
  </insert>

  <update id="update" parameterType="team.combinatorics.midtermproject.model.po.ServicePO">
    update after_sale_service
    <trim prefix="SET" suffixOverrides=",">
      <if test="service.serviceType != null">
        service_type = #{service.serviceType},
      </if>
      <if test="service.description != null">
        `description` = #{service.description},
      </if>
      <if test="service.state != null">
        state = #{service.state},
      </if>
      <if test="service.wid != null">
        wid = #{service.wid},
      </if>
    </trim>
    where sid = #{service.sid}
    and #{service.wid} in (select wid from worker)
  </update>

  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ServiceResultMap">
    select sid, service_type, description, state, wid, pid
    from after_sale_service
    where sid = #{sid,jdbcType=INTEGER}
  </select>

  <select id="selectAll" resultMap="ServiceResultMap">
    select sid, service_type, description, state, wid, pid
    from after_sale_service
  </select>

  <select id="countAll" resultType="java.lang.Integer">
    select count(*) from after_sale_service
  </select>

  <select id="selectByUid" parameterType="java.lang.Integer" resultMap="ServiceResultMap">
    create view serU_temp as select after_sale_service.*, product.uid
    from after_sale_service left join product on after_sale_service.pid = product.pid;
    select * from serU_temp where uid = #{uid,jdbcType=INTEGER};
    drop view serU_temp;
  </select>

  <select id="countByUid" parameterType="java.lang.Integer" resultType="java.lang.Integer">
    create view serU_temp as select after_sale_service.*, product.uid
    from after_sale_service left join product on after_sale_service.pid = product.pid;
    select count(*) from serU_temp where uid = #{uid,jdbcType=INTEGER};
    drop view serU_temp;
  </select>

  <select id="selectByWid" parameterType="java.lang.Integer" resultMap="ServiceResultMap">
    select sid, service_type, description, state, wid, pid
    from after_sale_service
    where wid = #{wid,jdbcType=INTEGER}
    order by (pid);
  </select>

  <select id="countByWid" parameterType="java.lang.Integer" resultType="java.lang.Integer">
    create view serW_temp as select sid from after_sale_service where wid = #{wid,jdbcType=INTEGER};
    select count(*) from serW_temp;
    drop view serW_temp;
  </select>

  <select id="selectByDid" parameterType="java.lang.Integer" resultMap="ServiceResultMap">
    select sid, service_type, description, state, wid, pid
    from after_sale_service
    where wid in (select wid from worker where did = #{did})
    order by (wid);
  </select>

  <select id="countByDid" parameterType="java.lang.Integer" resultType="java.lang.Integer">
    create view serD_temp as select sid from after_sale_service where wid in (select wid from worker where did = #{did});
    select count(*) from serD_temp;
    drop view serD_temp;
  </select>

  <update id="updateWid" parameterType="team.combinatorics.midtermproject.model.po.IdGroup">
    update after_sale_service
    set wid = #{newId}
    where wid = #{oldId}
  </update>

</mapper>